<?xml version="1.0"?>
<callback>

  <!-- SOC handlers -->
  <function id="POLL_COMPLETE" 
            name="emberPollCompleteHandler" 
            returnType="void" 
            stackMacro="EMBER_APPLICATION_HAS_POLL_COMPLETE_HANDLER" 
            consumed="false" 
            platformType="soc">
    <description>
This is called by the stack when a data poll to the parent is complete. See stack documentation for more information.
    </description>
    <arg name="status" 
         type="EmberStatus" 
         description="Ember status value." />
    <codeForStub />
  </function>

  <function id="MAC_PASSTHROUGH" name="emberMacPassthroughMessageHandler" returnType="void" stackMacro="EMBER_APPLICATION_HAS_MAC_PASSTHROUGH_HANDLER" consumed="false" platformType="soc">
    <description>
      This is called by stack when an interpan message is received.
    </description>
    <arg name="messageType" 
         type="EmberMacPassthroughType" 
         description="The type of interpan message being received"/>
    <arg name="message" 
         type="EmberMessageBuffer" 
         description="The interpan message"/>
    <codeForStub/>
  </function>

  <function id="MAC_FILTER_MATCH_MESSAGE" name="emberMacFilterMatchMessageHandler" returnType="void" stackMacro="EMBER_APPLICATION_HAS_MAC_FILTER_MATCH_MESSAGE_HANDLER" consumed="false" platformType="soc">
    <description>
      This function is called when the stack has received a raw MAC message that has matched one of the application's configured MAC filters.
    </description>
    <arg name="macFilterMatchStruct" type="const EmberMacFilterMatchStruct *" description="This is a pointer to a structure containing information about the matching message, including the index of the filter that was matched, and the actual data of the message." />
    <codeForStub />
  </function>

  <function id="POLL" name="emberPollHandler" returnType="void" stackMacro="EMBER_APPLICATION_HAS_POLL_HANDLER" consumed="false" platformType="soc">
    <description>
      This is called by stack when poll is initiated. See stack documentation for more information.
    </description>
    <arg name="childId" 
         type="EmberNodeId" 
         description="The ID of the child that is requesting data"/>
    <arg name="transmitExpected" 
         type="boolean" 
         description="TRUE if the child is expecting an application supplied data message"/>
    <codeForStub/>
  </function>

  <function id="ZIGBEE_KEY_ESTABLISHMENT" name="emberZigbeeKeyEstablishmentHandler" returnType="void" stackMacro="EMBER_APPLICATION_HAS_ZIGBEE_KEY_ESTABLISHMENT_HANDLER" consumed="false" platformType="soc">
    <description>
      This is called by stack to notify it of the status of the request for a Link Key.  See stack documentation for more information.
    </description>
    <arg name="partner" type="EmberEUI64"     description="The IEEE address of the partner device.  Or all zeros if the Key establishment failed." />
    <arg name="status"  type="EmberKeyStatus" description="The status of the key establishment." />
    <codeForStub />
  </function>

  <function id="INCOMING_ROUTE_ERROR_HANDLER" name="emberIncomingRouteErrorHandler" returnType="void" stackMacro="EMBER_APPLICATION_HAS_INCOMING_ROUTE_ERROR_HANDLER" consumed="false" platformType="soc">
     <description>
       This is called by the stack to notify the application that a route error message has been received.
     </description>
     <arg name="status" type="EmberStatus" description="The type of route error."/>
     <arg name="target" type="EmberNodeId" description="The node ID associated with the error.  Depending on the error code this may be either originator of the error message or the node ID of the destination that could not be reached."/>
     <codeForStub>
emberAfPushCallbackNetworkIndex();
emberAfPopNetworkIndex();
     </codeForStub>
   </function>

  <function id="INCOMING_BOOTLOAD_MESSAGE_HANDLER" name="emberIncomingBootloadMessageHandler" returnType="void" stackMacro="EMBER_APPLICATION_HAS_BOOTLOAD_HANDLERS">
    <description>
      This is called when the stack receives an incoming Ember bootload message.
    </description>
    <arg name="longId" type="EmberEUI64" description="The sender of the message"/>
    <arg name="message" type="EmberMessageBuffer" description="The buffer containing the message data."/>
    <codeForStub/>
  </function>

  <function id="BOOTLOAD_TRANSMIT_COMPLETE_HANDLER" name="emberBootloadTransmitCompleteHandler" returnType="void" stackMacro="EMBER_APPLICATION_HAS_BOOTLOAD_HANDLERS">
    <description>
      This is called when the stack has the result of an attempt to send an Ember bootload message."
    </description>
    <arg name="message" type="EmberMessageBuffer" description="The buffer containing the message data that was sent."/>
    <arg name="status"  type="EmberStatus" description="The message send result"/>
    <codeForStub/>
  </function>

  <!-- Ezsp handlers -->
  <function id="EZSP_POLL_COMPLETE" 
            name="ezspPollCompleteHandler" 
            returnType="void" 
            stackMacro="EZSP_APPLICATION_HAS_POLL_COMPLETE_HANDLER" 
            consumed="false" 
            platformType="host">
    <description>
This is called by the EZSP when a data poll to the parent is complete. See EZSP documentation for more information.
    </description>
    <arg name="status" 
         type="EmberStatus" 
         description="Ember status value." />
    <codeForStub />
  </function>

  <function id="EZSP_POLL" 
            name="ezspPollHandler" 
            returnType="void" 
            stackMacro="EZSP_APPLICATION_HAS_POLL_HANDLER" 
            consumed="false" 
            platformType="host">
    <description>
      This is called by EZSP when poll is initiated. See EZSP documentation for more information.
    </description>
    <arg name="childId" 
         type="EmberNodeId" 
         description="The ID of the child that is requesting data"/>
    <codeForStub/>
  </function>
  <function id="EZSP_TIMER" 
            name="ezspTimerHandler" 
            returnType="void" 
            stackMacro="EZSP_APPLICATION_HAS_TIMER_HANDLER" 
            consumed="false" 
            platformType="host">
    <description>
      A callback from the timer.
    </description>
    <arg name="timerId" 
         type="int8u" 
         description="Which timer generated the callback (0 or 1)"/>
  </function>

  <function id="EZSP_MAC_PASSTHROUGH" name="ezspMacPassthroughMessageHandler" returnType="void" stackMacro="EZSP_APPLICATION_HAS_MAC_PASSTHROUGH_HANDLER" consumed="false" platformType="host">
    <description>
      This is called by stack when an interpan message is received.
    </description>
    <arg name="messageType" 
         type="EmberMacPassthroughType" 
         description="The type of interpan message being received"/>
    <arg name="lastHopLqi" 
         type="int8u" 
         description="The link quality indicator of the last hop"/>
    <arg name="lastHopRssi" 
         type="int8s" 
         description="The received signal strength of the last hop"/>
    <arg name="messageLength" 
         type="int8u" 
         description="The length of the incoming interpan message"/>
    <arg name="messageContents" 
         type="int8u *" 
         description="A pointer to the incoming interpan message"/>
    <codeForStub/>
  </function>

  <function id="EZSP_MAC_FILTER_MATCH_MESSAGE" name="ezspMacFilterMatchMessageHandler" returnType="void" stackMacro="EZSP_APPLICATION_HAS_MAC_FILTER_MATCH_HANDLER" consumed="false" platformType="host">
    <description>
      This function is called when the stack has received a raw MAC message that has matched one of the application's configured MAC filters.
    </description>
    <arg name="filterIndexMatch"      type="int8u"                   description="The index of the filter that was matched." />
    <arg name="legacyPassthroughType" type="EmberMacPassthroughType" description="The type of MAC passthrough message received." />
    <arg name="lastHopLqi"            type="int8u"                   description="The link quality from the node that last relayed the message." />
    <arg name="lastHopRssi"           type="int8s"                   description="The energy level (in units of dBm) observed during reception." />
    <arg name="messageLength"         type="int8u"                   description="The length of the messageContents parameter in bytes." />
    <arg name="messageContents"       type="int8u *"                 description="The raw message that was received." />
    <codeForStub />
  </function>

  <function id="EZSP_ZIGBEE_KEY_ESTABLISHMENT" name="ezspZigbeeKeyEstablishmentHandler" returnType="void" stackMacro="EZSP_APPLICATION_HAS_ZIGBEE_KEY_ESTABLISHMENT_HANDLER" consumed="false" platformType="host">
    <description>
      This is called by stack to notify it of the status of the request for a Link Key.  See stack documentation for more information.
    </description>
    <arg name="partner" type="EmberEUI64"     description="The IEEE address of the partner device.  Or all zeros if the Key establishment failed." />
    <arg name="status"  type="EmberKeyStatus" description="The status of the key establishment." />
    <codeForStub />
  </function>

  <function id="EZSP_INCOMING_ROUTE_ERROR_HANDLER" name="ezspIncomingRouteErrorHandler" returnType="void" stackMacro="EZSP_APPLICATION_HAS_INCOMING_ROUTE_ERROR_HANDLER" consumed="false" platformType="host">
     <description>
       This is called by the stack to notify the application that a route error message has been received.
     </description>
     <arg name="status" type="EmberStatus" description="The type of route error."/>
     <arg name="target" type="EmberNodeId" description="The node ID associated with the error.  Depending on the error code this may be either originator of the error message or the node ID of the destination that could not be reached."/>
     <codeForStub>
emberAfPushCallbackNetworkIndex();
emberAfPopNetworkIndex();
     </codeForStub>
   </function>

  <function id="EZSP_CUSTOM_FRAME_HANDLER" name="ezspCustomFrameHandler" returnType="void" stackMacro="EZSP_APPLICATION_HAS_CUSTOM_FRAME_HANDLER" consumed="false" platformType="host">
    <description>
      This is called when Extensible NCP software running on the NCP sends a custom EZSP frame to the host.  Normal Silicon Labs NCP software images do not use custom EZSP frames.  Customer created NCP images may implement this frame.
    </description>
    <arg name="payloadLength" type="int8u"  description="The length of the custom frame."/>
    <arg name="payload"       type="int8u*" description="The custom payload data."/>
    <codeForStub>
    </codeForStub>
  </function>

  <function id="EZSP_INCOMING_BOOTLOAD_MESSAGE_HANDLER" name="ezspIncomingBootloadMessageHandler" returnType="void" stackMacro="EZSP_APPLICATION_HAS_BOOTLOADER_HANDLER" consumed="false" platformType="host">
    <description>
      This is called when the NCP receives an Ember bootload message and it is being passed to the host.
    </description>
    <arg type="EmberEUI64" name="longId"   description="The sender of the message"/>
    <arg type="int8s" name="lastHopLqi"    description="The LQI of the message"/>
    <arg type="int8s" name="lastHopRssi"   description="The RSSI of the message"/>
    <arg type="int8u" name="messageLength" description="The length of the received message"/>
    <arg type="int8u*" name="message"      description="The message data"/>
    <codeForStub/>
  </function>
  <function id="EZSP_BOOTLOAD_TRANSMIT_COMPLETE_HANDLER" name="ezspBootloadTransmitCompleteHandler" returnType="void" stackMacro="EZSP_APPLICATION_HAS_BOOTLOADER_HANDLER" consumed="false" platformType="host">
    <description>
      This is called to notify the host of the result of an attempt to send an Ember bootload message.
    </description>
    <arg type="EmberStatus" name="status"        description="The result of the send attempt."/>
    <arg type="int8u"       name="messageLength" description="The length of the received message"/>
    <arg type="int8u*"      name="message"       description="The message data"/>
  </function>
</callback>
